quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=postgres
quarkus.datasource.password=postgres
quarkus.datasource.reactive.url=postgresql://localhost:8765/postgres
quarkus.datasource.reactive.max-size=20

# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation = drop-and-create
%prod.quarkus.hibernate-orm.sql-load-script = import.sql

greeting=Howdy

feature-flags.product-details=true
feature-flags.product-search=true
feature-flags.product-update=true
feature-flags.reactive-prices=true

kafka.bootstrap.servers=127.0.0.1:9092
mp.messaging.outgoing.raw-price-updates-out.connector=smallrye-kafka
mp.messaging.outgoing.raw-price-updates-out.topic=raw-price-updates
mp.messaging.outgoing.raw-price-updates-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.incoming.raw-price-updates-in.connector=smallrye-kafka
mp.messaging.incoming.raw-price-updates-in.topic=raw-price-updates
mp.messaging.incoming.raw-price-updates-in.value.deserializer=com.lunatech.training.quarkus.PriceUpdateDeserializer
mp.messaging.outgoing.price-updates-out.connector=smallrye-kafka
mp.messaging.outgoing.price-updates-out.topic=price-updates
mp.messaging.outgoing.price-updates-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.incoming.price-updates-in.connector=smallrye-kafka
mp.messaging.incoming.price-updates-in.topic=price-updates
mp.messaging.incoming.price-updates-in.value.deserializer=com.lunatech.training.quarkus.PriceUpdateDeserializer

mp.messaging.incoming.raw-price-updates-in.failure-strategy=dead-letter-queue
mp.messaging.incoming.raw-price-updates-in.dead-letter-queue.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
